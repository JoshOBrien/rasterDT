[{"path":"https://joshobrien.github.io/rasterDT/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua O'Brien. Maintainer.","code":""},{"path":"https://joshobrien.github.io/rasterDT/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"O'Brien J (2023). rasterDT: Fast Raster Summary Manipulation. https://github.com/JoshOBrien/rasterDT/, https://joshobrien.github.io/rasterDT/.","code":"@Manual{,   title = {rasterDT: Fast Raster Summary and Manipulation},   author = {Joshua O'Brien},   year = {2023},   note = {https://github.com/JoshOBrien/rasterDT/, https://joshobrien.github.io/rasterDT/}, }"},{"path":"https://joshobrien.github.io/rasterDT/index.html","id":"rasterdt-fast-alternatives-to-raster-package-functions","dir":"","previous_headings":"","what":"Fast Raster Summary and Manipulation ","title":"Fast Raster Summary and Manipulation ","text":"rasterDT uses fast indexing, aggregation, assignment operations provided data.table power speedy alternatives several raster package functions. functions provides 5 25 times faster raster package functions replace.","code":""},{"path":"https://joshobrien.github.io/rasterDT/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast Raster Summary and Manipulation ","text":"Use devtools install current version rasterDT:","code":"devtools::install_github(\"JoshOBrien/rasterDT\")"},{"path":"https://joshobrien.github.io/rasterDT/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Fast Raster Summary and Manipulation ","text":"rasterDT functions take arguments raster package equivalents designed (exceptions) return values. Like raster equivalents, work rasters large hold memory (exception fasterizeDT) RasterLayer, RasterStack RasterBrick objects. package leans heavily data.table, tabular results returned data.tables instead data.frames. prefer data.frame, just wrap data.table object call data.frame().","code":""},{"path":"https://joshobrien.github.io/rasterDT/index.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"Fast Raster Summary and Manipulation ","text":"Let’s compare speed rasterDT functions raster package equivalents. using realistic data, first use raster::getData() download prepare three raster layers display altitude, January precipitation, political regions Peru resolution one half arc minute. (PLEASE NOTE: running (fully reproducible) code download several raster files working directory current R session.)  three resulting rasters displayed (using plotting calls shown ) figure :  Next, estimate degree speedup gained using rasterDT function relative raster package equivalent, benchmark pairs functions, executing equivalent calls 5 times comparing average timings:","code":"library(rasterDT) library(rasterVis) library(microbenchmark)  ## Altitude in m altitude <- getData(\"alt\", country = \"PER\", res = 0.5) altitude <- crop(altitude, extent(altitude) - c(0, 0.2))  ## Political subdivisions (categorical) regions_shp <- getData(\"GADM\", country = \"PER\", level = 1) regions <- fasterizeDT(regions_shp, altitude, field = \"NAME_1\")  ## January precipitation in mm precip <- getData(\"worldclim\", var = \"prec\", res = 0.5,                   lon = -75, lat = -15) precip1 <- crop(precip[[1]], regions) precip1 <- mask(precip1, regions)"},{"path":"https://joshobrien.github.io/rasterDT/index.html","id":"freqdt-vs-freq-6x-speedup","dir":"","previous_headings":"Performance","what":"freqDT() vs. freq(): ~6x speedup","title":"Fast Raster Summary and Manipulation ","text":"","code":"microbenchmark(freqDT = freqDT(altitude),                freq   = freq(altitude),                times = 5) ## Unit: milliseconds ##    expr       min        lq      mean    median        uq       max neval cld ##  freqDT  358.1587  373.9958  402.0715  375.5939  404.4736  498.1357     5  a ##    freq 2481.5614 2570.1578 2583.9395 2605.2673 2611.1084 2651.6024     5   b  out_freqDT <- freqDT(altitude) out_freq <- freq(altitude)"},{"path":"https://joshobrien.github.io/rasterDT/index.html","id":"crosstabdt-vs-crosstab-6x-speedup","dir":"","previous_headings":"Performance","what":"crosstabDT() vs crosstab(): ~6x speedup","title":"Fast Raster Summary and Manipulation ","text":"","code":"microbenchmark(crosstabDT = crosstabDT(altitude, regions),                crosstab   = crosstab(altitude, regions),                times = 5) ## Unit: milliseconds ##        expr       min        lq     mean    median       uq      max neval cld ##  crosstabDT  934.0795  934.6892 1028.893  979.0466 1147.490 1149.160     5  a ##    crosstab 6274.8551 6430.1598 6439.387 6454.1255 6509.927 6527.869     5   b  out_crosstabDT <- crosstabDT(altitude, regions) out_crosstab <- crosstab(altitude, regions)"},{"path":"https://joshobrien.github.io/rasterDT/index.html","id":"zonaldt-vs-zonal-11x-speedup","dir":"","previous_headings":"Performance","what":"zonalDT() vs zonal(): ~11x speedup","title":"Fast Raster Summary and Manipulation ","text":"","code":"microbenchmark(zonalDT = zonalDT(altitude, regions, min),                zonal   = zonal(altitude, regions, min),                times = 5) ## Unit: milliseconds ##     expr       min        lq      mean    median        uq       max neval cld ##  zonalDT  200.5657  204.6846  206.6882  207.9012  209.0513  211.2381     5  a ##    zonal 2195.7178 2199.3366 2242.2448 2219.9958 2266.3005 2329.8735     5   b  out_zonalDT <- zonalDT(altitude, regions, min) out_zonal <- zonal(altitude, regions, min)"},{"path":"https://joshobrien.github.io/rasterDT/index.html","id":"subsdt-vs-subs-23x-speedup","dir":"","previous_headings":"Performance","what":"subsDT() vs subs(): ~23x speedup","title":"Fast Raster Summary and Manipulation ","text":"","code":"dict <- zonalDT(altitude, regions, min, na.rm = TRUE) microbenchmark(subsDT = subsDT(regions, dict),                subs   = subs(regions, dict),                times = 5) ## Unit: milliseconds ##    expr       min        lq      mean    median        uq       max neval cld ##  subsDT  250.4851  254.4848  356.3356  259.0266  293.7392  723.9421     5  a ##    subs 8077.3643 8086.8702 8167.4095 8184.9779 8186.2390 8301.5961     5   b  out_subsDT <- subsDT(regions, dict) out_subs <- subs(regions, dict)"},{"path":"https://joshobrien.github.io/rasterDT/index.html","id":"fasterizedt-vs-rasterize-25x-speedup","dir":"","previous_headings":"Performance","what":"fasterizeDT() vs rasterize(): ~25x speedup","title":"Fast Raster Summary and Manipulation ","text":"","code":"## rasterize()'s field= argument can handle factor but not character vectors regions_shp$NAME_FAC <- factor(regions_shp$NAME_1) microbenchmark(fasterizeDT = fasterizeDT(regions_shp, altitude, field = \"NAME_FAC\"),                rasterize   = rasterize(regions_shp, altitude, field = \"NAME_FAC\"),                times = 5) ## Unit: milliseconds ##         expr        min         lq      mean     median         uq       max ##  fasterizeDT   48.09048   49.00721  107.8917   51.78699   52.29528  338.2786 ##    rasterize 2693.34767 2734.66681 2748.1537 2763.89009 2771.21738 2777.6464  out_fasterizeDT <- fasterizeDT(regions_shp, altitude, field = \"NAME_FAC\") out_rasterize   <- rasterize(regions_shp, altitude, field = \"NAME_FAC\")"},{"path":"https://joshobrien.github.io/rasterDT/reference/cat_to_val.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Categorical Raster to a Value Raster — cat_to_val","title":"Convert a Categorical Raster to a Value Raster — cat_to_val","text":"Use categorical raster's RAT convert continuous raster","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/cat_to_val.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Categorical Raster to a Value Raster — cat_to_val","text":"","code":"cat_to_val(r, which = 2)"},{"path":"https://joshobrien.github.io/rasterDT/reference/cat_to_val.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Categorical Raster to a Value Raster — cat_to_val","text":"r categorical raster RAT (returned levels(r)[[1]]), whose first column contain entry every factor level present raster. least one subsequent columns contain numeric values level converted. integer character string giving index name column r's RAT numerical values value r mapped. Default value 2.","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/cat_to_val.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Categorical Raster to a Value Raster — cat_to_val","text":"continuous raster category level r replaced corresponding value.","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/cat_to_val.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a Categorical Raster to a Value Raster — cat_to_val","text":"Joshua O'Brien","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/cat_to_val.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Categorical Raster to a Value Raster — cat_to_val","text":"","code":"r_cat <- raster(matrix(c(2, 2, 2, 1), ncol = 2)) levels(r_cat) <- data.frame(ID = c(1, 2),                             VAL1 = c(0.1, 200),                             VAL2 = c(33, 44))  ## Second column of RAT is used by default r_con1 <- cat_to_val(r_cat) as.matrix(r_con1) #>      [,1]  [,2] #> [1,]  200 200.0 #> [2,]  200   0.1  ## Use 'which=' argument for conversion to another RAT column r_con2 <- cat_to_val(r_cat, which = \"VAL2\") as.matrix(r_con2) #>      [,1] [,2] #> [1,]   44   44 #> [2,]   44   33"},{"path":"https://joshobrien.github.io/rasterDT/reference/crosstabDT.html","id":null,"dir":"Reference","previous_headings":"","what":"Speedy Raster Cross-tabulation — crosstabDT","title":"Speedy Raster Cross-tabulation — crosstabDT","text":"fast data.table-based alternative raster::crosstab().","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/crosstabDT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Speedy Raster Cross-tabulation — crosstabDT","text":"","code":"crosstabDT(x, y, digits = 0, long = FALSE, useNA = FALSE)"},{"path":"https://joshobrien.github.io/rasterDT/reference/crosstabDT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Speedy Raster Cross-tabulation — crosstabDT","text":"x Raster* object y x just one layer, RasterLayer object. Otherwise, x multi-layered RasterStack RasterBrick, argument () unused. digits Integer. number digits rounding values cross-tabulation. Default 0. long Logical. TRUE, results returned 'long' format data.table instead table. Default FALSE. useNA Logical. returned table data.table include counts NA values? Default FALSE.","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/crosstabDT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Speedy Raster Cross-tabulation — crosstabDT","text":"Either table data.table recording     frequency combination raster values.","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/crosstabDT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Speedy Raster Cross-tabulation — crosstabDT","text":"Joshua O'Brien","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/crosstabDT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Speedy Raster Cross-tabulation — crosstabDT","text":"","code":"r <- raster(nc = 5, nr = 5) r[] <- runif(ncell(r)) * 2 s <- setValues(r, runif(ncell(r)) * 3) crosstabDT(r, s) #>    y #> x   0 1 2 3 #>   0 1 5 1 1 #>   1 2 3 4 4 #>   2 1 1 1 1  rs <- r/s r[1:5] <- NA s[20:25] <- NA x <- stack(r, s, rs) crosstabDT(x, useNA = TRUE, long = TRUE) #>     layer.1 layer.2 layer.3 Freq #>  1:      NA       0       3    1 #>  2:      NA       1       0    1 #>  3:      NA       2       1    1 #>  4:      NA       3       0    1 #>  5:      NA       3       1    1 #>  6:       0      NA       0    2 #>  7:       0      NA       1    1 #>  8:       0       1       0    1 #>  9:       0       1       1    1 #> 10:       0       2       0    1 #> 11:       0       3       0    1 #> 12:       1      NA       0    1 #> 13:       1      NA       1    1 #> 14:       1      NA       2    1 #> 15:       1       1       1    2 #> 16:       1       2       0    2 #> 17:       1       2       1    1 #> 18:       1       3       0    2 #> 19:       2       0      22    1 #> 20:       2       1       1    1 #> 21:       2       2       1    1 #>     layer.1 layer.2 layer.3 Freq"},{"path":"https://joshobrien.github.io/rasterDT/reference/fasterizeDT.html","id":null,"dir":"Reference","previous_headings":"","what":"Polygon Rasterization Using Numeric, Factor, or\n    Character Fields — fasterizeDT","title":"Polygon Rasterization Using Numeric, Factor, or\n    Character Fields — fasterizeDT","text":"front end fasterize::fasterize(), fixing several infelicities.","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/fasterizeDT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polygon Rasterization Using Numeric, Factor, or\n    Character Fields — fasterizeDT","text":"","code":"fasterizeDT(   x,   raster,   field = NULL,   fun = \"last\",   background = NA_real_,   by = NULL )"},{"path":"https://joshobrien.github.io/rasterDT/reference/fasterizeDT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polygon Rasterization Using Numeric, Factor, or\n    Character Fields — fasterizeDT","text":"x Either sf::sf() object geometry column POLYGON /MULTIPOLYGON objects sp::SpatialPolygonsDataFrame object. raster RasterLayer object used template raster output. field Character. name column x, providing value polygons rasterized. NULL (default), polygons given value 1. fun Character. name function combine overlapping polygons. Currently takes \"sum\", \"first\", \"last\", \"min\", \"max\", \"count\", \"\". details, see ?fasterize::fasterize. background Value put cells covered features x. Default NA. Character string giving name column x aggregate layers. set, fasterizeDT return RasterBrick many layers unique values column.","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/fasterizeDT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Polygon Rasterization Using Numeric, Factor, or\n    Character Fields — fasterizeDT","text":"raster size, extent, resolution     projection supplied raster template. Unlike  fasterize::fasterize(),  fasterizeDT returns raster type     data column x selected field argument.","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/fasterizeDT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Polygon Rasterization Using Numeric, Factor, or\n    Character Fields — fasterizeDT","text":"Unlike functions package, fasterizeDT() use data.table speed computations. Instead, wrapper fasterize::fasterize(), intended address several function's limitations. importantly, fasterizeDT() takes care properly handle rasterization operations either template RasterLayer selected polygon feature field factor. Specifically, always returns raster whose type (numeric factor) levels (factor) match spatial polygon attribute indicated field argument. Second, field specifies attribute class \"character\", fasterizeDT() automatically converts factor returns factor raster. , unlike fasterize::fasterize() raster::rasterize(). Finally, unlike fasterize::fasterize(), fasterizeDT() accepts inputs either sf::sf() objects sp::SpatialPolygonsDataFrame objects.","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/fasterizeDT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Polygon Rasterization Using Numeric, Factor, or\n    Character Fields — fasterizeDT","text":"Joshua O'Brien","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/fasterizeDT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polygon Rasterization Using Numeric, Factor, or\n    Character Fields — fasterizeDT","text":"","code":"# \\donttest{ ## Load example polygons and prepare a template raster if (require(raster)) { SPDF <- shapefile(system.file(\"external/lux.shp\", package = \"raster\")) llratio <- 1/cos(pi * mean(coordinates(SPDF)[, 2])/180) rr <- raster(extent(SPDF),              resolution = c(llratio * 0.01, 0.01),              crs = proj4string(SPDF))  ## An integer-valued field produces a numeric raster rInt <- fasterizeDT(SPDF, rr, field = \"ID_2\") plot(rInt, col = colorRampPalette(blues9)(12))  ## A character-valued field returns a factor raster rFac <- fasterizeDT(SPDF, rr, field = \"NAME_2\") if (require(rasterVis)) {     levelplot(rFac) } } #> Loading required package: rasterVis #> Loading required package: lattice   # }"},{"path":"https://joshobrien.github.io/rasterDT/reference/freqDT.html","id":null,"dir":"Reference","previous_headings":"","what":"Speedy Raster Value Frequency Tabulation — freqDT","title":"Speedy Raster Value Frequency Tabulation — freqDT","text":"fast data.table-based alternative raster::freq().","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/freqDT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Speedy Raster Value Frequency Tabulation — freqDT","text":"","code":"freqDT(x, ...)  # S4 method for RasterLayer freqDT(x, digits = 0, value = NULL, useNA = c(\"ifany\", \"no\", \"always\"), ...)  # S4 method for RasterStackBrick freqDT(   x,   digits = 0,   value = NULL,   useNA = c(\"ifany\", \"no\", \"always\"),   merge = FALSE,   ... )"},{"path":"https://joshobrien.github.io/rasterDT/reference/freqDT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Speedy Raster Value Frequency Tabulation — freqDT","text":"x RasterLayer, RasterStack, RasterBrick object field class. ... Additional arguments raster::writeRaster(), function relies. digits Integer rounding cell values. Argument passed round value single numeric, logical, NA value. supplied, freqDT() count number cells value. useNA Character (one \"\", \"ifany\", \"always\"). NA values? See table details. merge Logical. TRUE list merged single data.table.","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/freqDT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Speedy Raster Value Frequency Tabulation — freqDT","text":"Joshua O'Brien","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/freqDT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Speedy Raster Value Frequency Tabulation — freqDT","text":"","code":"r <- raster(nrow = 18, ncol = 36) r[] <- runif(ncell(r)) r[1:5] <- NA r <- r * r * r * 5 freqDT(r) #>    ID freq #> 1: NA    5 #> 2:  0  293 #> 3:  1  134 #> 4:  2   75 #> 5:  3   77 #> 6:  4   46 #> 7:  5   18  freqDT(r, value = 2) #> [1] 75  s <- stack(r, r*2, r*3) freqDT(s, merge = TRUE) #>     ID layer.1 layer.2 layer.3 #>  1: NA       5       5       5 #>  2:  0     293     233     209 #>  3:  1     134     104      84 #>  4:  2      75      57      49 #>  5:  3      77      55      40 #>  6:  4      46      43      45 #>  7:  5      18      37      28 #>  8:  6      NA      36      29 #>  9:  7      NA      27      18 #> 10:  8      NA      21      32 #> 11:  9      NA      19      24 #> 12: 10      NA      11      21 #> 13: 11      NA      NA      15 #> 14: 12      NA      NA      15 #> 15: 13      NA      NA      16 #> 16: 14      NA      NA      14 #> 17: 15      NA      NA       4"},{"path":"https://joshobrien.github.io/rasterDT/reference/rasterDT-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast Raster Summary and Manipulation — rasterDT-package","title":"Fast Raster Summary and Manipulation — rasterDT-package","text":"Fast alternatives several relatively slow 'raster' package   functions. large rasters, functions run 5   approximately 100 times faster 'raster' package functions   replace. 'fasterize' package, one function   package depends, includes implementation scan line   algorithm attributed Wylie et al. (1967)   <doi:10.1145/1465611.1465619>.","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/rasterDT-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast Raster Summary and Manipulation — rasterDT-package","text":"DESCRIPTION file: package yet installed build time.     Index:  package yet installed build time. Fast alternatives several relatively slow raster package   functions. large rasters, functions run 5   approximately 100 times faster raster package functions   replace.","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/rasterDT-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast Raster Summary and Manipulation — rasterDT-package","text":"Joshua O'Brien Maintainer: Joshua O'Brien <joshmobrien@gmail.com>","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/subsDT.html","id":null,"dir":"Reference","previous_headings":"","what":"Speedy Raster Value Substitution — subsDT","title":"Speedy Raster Value Substitution — subsDT","text":"fast data.table-based alternative raster::subs().","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/subsDT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Speedy Raster Value Substitution — subsDT","text":"","code":"subsDT(x, dict, by = 1, which = 2, subsWithNA = TRUE, filename = \"\", ...)"},{"path":"https://joshobrien.github.io/rasterDT/reference/subsDT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Speedy Raster Value Substitution — subsDT","text":"x Categorical RasterLayer integer values giving field class. dict data.frame data.table one (possibly ) columns corresponding values cells x one (possibly ) columns giving value value x mapped. Vector one possibly integers character strings giving indices names column dict containing categorical values x. Vector one possibly integers character strings giving indices names column dict numerical values value mapped. subsWithNA Logical. TRUE values matched become NA.  FALSE, retain original value (also NA). latter option handy want replace one values. used x multiple layers filename Character string giving (optional) file name resultant raster written. ... Additional arguments raster::writeRaster(), function relies.","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/subsDT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Speedy Raster Value Substitution — subsDT","text":"RasterLayer object.","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/subsDT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Speedy Raster Value Substitution — subsDT","text":"Joshua O'Brien","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/subsDT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Speedy Raster Value Substitution — subsDT","text":"","code":"r <- raster(ncol = 10, nrow = 10) r[] <- round(runif(ncell(r)) * 10) df <- data.frame(id = 2:8, v = c(10, 10, 11, 11, 12:14)) x <- subsDT(r, df) x2 <- subsDT(r, df, subsWithNA = FALSE)  df$v2 <- df$v * 10 x3 <- subsDT(r, df, which = 2:3)  s <- stack(r, r*3) names(s) <- c(\"first\", \"second\") x4 <- subsDT(s, df) x5 <- subsDT(s, df, which = 2:3)"},{"path":"https://joshobrien.github.io/rasterDT/reference/zonalDT.html","id":null,"dir":"Reference","previous_headings":"","what":"Speedy Zonal Statistics — zonalDT","title":"Speedy Zonal Statistics — zonalDT","text":"fast data.table-based alternative raster::zonal().","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/zonalDT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Speedy Zonal Statistics — zonalDT","text":"","code":"zonalDT(x, z, fun = sum, na.rm = TRUE)"},{"path":"https://joshobrien.github.io/rasterDT/reference/zonalDT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Speedy Zonal Statistics — zonalDT","text":"x Raster* totality whose values fun applied within zone. z categorical RasterLayer codes representing zones. fun name character string giving function applied summarize values zone. needs return single (least length-one vector). x might contain NA values, equipped handle . large rasters, function needs one, like sum() whose value even carried two-stage application (.e. first data subsets results subset applications). na.rm Logical. TRUE, NA values x ignored.","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/zonalDT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Speedy Zonal Statistics — zonalDT","text":"data.table summary value zone.","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/zonalDT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Speedy Zonal Statistics — zonalDT","text":"Joshua O'Brien","code":""},{"path":"https://joshobrien.github.io/rasterDT/reference/zonalDT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Speedy Zonal Statistics — zonalDT","text":"","code":"r <- raster(ncols = 10, nrows = 10) r[] <- runif(ncell(r)) * 1:ncell(r) z <- r z[] <- rep(1:5, each = 20) ## for big files, use a character value rather than a function zonalDT(r, z, \"sum\") #>    z    layer #> 1: 1 123.4224 #> 2: 2 298.8698 #> 3: 3 535.5253 #> 4: 4 730.3385 #> 5: 5 945.2900  ## for smaller files you can also provide a function zonalDT(r, z, mean) #>    z     layer #> 1: 1  6.171121 #> 2: 2 14.943491 #> 3: 3 26.776267 #> 4: 4 36.516924 #> 5: 5 47.264499 zonalDT(r, z, min) #>    z     layer #> 1: 1 0.3669905 #> 2: 2 1.6426280 #> 3: 3 0.3910445 #> 4: 4 1.5849348 #> 5: 5 3.3435498  ## multiple layers zonalDT(stack(r, r*10), z, \"sum\") #>    z  layer.1  layer.2 #> 1: 1 123.4224 1234.224 #> 2: 2 298.8698 2988.698 #> 3: 3 535.5253 5355.253 #> 4: 4 730.3385 7303.385 #> 5: 5 945.2900 9452.900"},{"path":"https://joshobrien.github.io/rasterDT/news/index.html","id":"version-032","dir":"Changelog","previous_headings":"","what":"Version 0.3.2","title":"Version 0.3.2","text":"CRAN release: 2022-12-15 Removed rgdal Suggests, request Roger Bivand. (rgdal soon retired, described detail .)","code":""}]
